import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  console.log('Middleware triggered for:', request.nextUrl.pathname)
  
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  // Public paths that don't require authentication
  const publicPaths = [
    '/',
    '/how-it-works',
    '/pricing',
    '/teachers',
    '/categories',
    '/search',
    '/auth/login',
    '/auth/register',
    '/auth/callback',
    '/auth/forgot-password',
    '/demo'
  ]

  const pathname = request.nextUrl.pathname
  const isPublicPath = publicPaths.includes(pathname) || pathname.startsWith('/api/')
  
  console.log('Is public path:', isPublicPath, 'for', pathname)

  // Skip authentication for public paths
  if (isPublicPath) {
    console.log('Allowing public access to:', pathname)
    return response
  }

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  
  if (!supabaseUrl || !supabaseAnonKey) {
    console.error('Missing Supabase environment variables')
    return response
  }

  const supabase = createServerClient(
    supabaseUrl,
    supabaseAnonKey,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          request.cookies.set({
            name,
            value,
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: CookieOptions) {
          request.cookies.set({
            name,
            value: '',
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  // Simple auth check - no database queries in middleware
  const { data: { user } } = await supabase.auth.getUser()

  // Protected routes
  const protectedPaths = ['/dashboard', '/admin']
  const isProtectedPath = protectedPaths.some(path => 
    request.nextUrl.pathname.startsWith(path)
  )

  if (isProtectedPath && !user) {
    return NextResponse.redirect(new URL('/login', request.url))
  }

  // Basic /dashboard redirect - role-based redirects handled in page components
  if (request.nextUrl.pathname === '/dashboard' && user) {
    return NextResponse.redirect(new URL('/dashboard/student/dashboard', request.url))
  }

  return response
}

export const config = {
  matcher: [
    /*
     * Match all routes except static files and API routes
     */
    '/((?!api|_next/static|_next/image|favicon.ico|manifest|robots|sitemap|sw).*)',
  ],
}